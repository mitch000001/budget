package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_earnings_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\x31\x6e\x84\x30\x10\x45\x7b\x4e\x31\xb2\x48\x17\x8c\x84\x52\x45\x86\x2e\x57\x48\x6f\x65\xc6\x60\xc5\x0c\xc8\x78\x0b\x16\xd1\xec\x79\xf6\x54\x7b\x92\x1d\x23\xb4\xda\xf2\x7d\xbd\xef\xef\xd9\x36\x40\x72\x9e\x09\x14\xd9\xc8\x9e\xfb\x45\xc1\xbe\x17\x66\x68\xba\x1f\xcf\x6c\x87\x91\xd8\xd4\x42\x85\xa8\x89\xc6\x39\xd8\xf4\x26\x57\x6e\x8a\xa3\x02\x9d\x2b\x18\xe0\x2f\xd8\x65\x69\x15\x86\x6a\x98\xa2\xbf\x4e\x9c\x6c\x50\x5d\x01\x20\xe5\x68\xb9\x27\x28\xff\x69\xfd\x84\x92\x38\xc5\x15\xbe\x5b\xd0\xaf\x95\x3c\x0b\x60\x30\x75\x22\x67\x4d\x02\x53\x0b\x1e\x29\xe6\x74\x8e\x9e\x93\x03\xf5\xf1\xa5\x1b\xa7\xce\x57\xf4\xaf\x0d\x17\x12\x19\x1e\xb7\xbb\x14\xf0\xdc\x23\xc6\xe3\x92\x1a\x43\xfe\xbc\xa0\xd0\x33\x00\x00\xff\xff\x7e\x8e\xf6\xe3\xf0\x00\x00\x00")

func templates_earnings_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_earnings_html_tmpl,
		"templates/_earnings.html.tmpl",
	)
}

func templates_earnings_html_tmpl() (*asset, error) {
	bytes, err := templates_earnings_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_earnings.html.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_earnings_form_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xb1\x4e\xc4\x30\x0c\x86\xf7\x3e\x85\xe5\x1d\xe5\x05\xda\x0e\x48\xac\x80\x04\x12\x73\xda\xb8\x4d\xa4\xc6\x39\xb5\x36\x82\x3b\xdd\x9b\xb1\xf1\x62\x24\xb9\xde\xc2\x09\x89\xcd\x51\xbe\xff\xb3\x65\x9f\x4e\xe0\x68\x0a\x4c\x80\x64\x57\x0e\x3c\x6f\x77\x53\x5a\x23\xc2\xf9\xdc\xb4\xa5\x82\x48\xe2\x93\xeb\xf0\xf9\xe9\xe5\x15\xc1\x8e\x12\x12\x77\x68\xb0\x6f\x00\xda\xc5\x0e\xb4\x40\xe6\x3a\x64\x1b\x09\xfb\x7b\x3a\x52\x18\x3d\x2b\xcf\xad\xa9\xbf\x95\x0b\x7c\x50\x01\xf9\x3c\x50\x87\x42\x1f\x82\x50\xf0\x3d\x64\x7e\xab\xde\xed\xa2\xd9\xf5\x46\xab\xfc\x47\x72\xc1\x6f\x2c\xce\x4a\x19\x48\x47\x9f\x87\xd9\xf2\x4b\xe3\x5f\xb6\x8a\xee\xb6\x5a\x9b\x1b\xc4\x07\xe7\x88\xaf\x50\xd2\xdc\xbd\xf6\xed\x70\xb2\xcb\x76\x4d\x0c\x2a\x92\x78\x8f\x6c\x3a\xc4\x20\xd8\x3f\x92\x12\x3c\x04\x66\xeb\x23\x81\x0f\x7c\xd4\xe9\xfb\x6b\x26\x6e\xcd\x85\xef\x9b\xd6\x94\x5d\xf7\x4d\xbe\x07\xb1\x2b\xcb\xff\x09\x00\x00\xff\xff\xfb\x17\x25\xe1\x9a\x01\x00\x00")

func templates_earnings_form_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_earnings_form_html_tmpl,
		"templates/_earnings_form.html.tmpl",
	)
}

func templates_earnings_form_html_tmpl() (*asset, error) {
	bytes, err := templates_earnings_form_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_earnings_form.html.tmpl", size: 410, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_expenses_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\x41\x6a\x85\x30\x10\x86\xf7\x9e\x62\x08\x76\x57\x23\x48\x57\x25\x0a\xbd\x44\xf7\x69\x67\xa2\xd2\x38\x4a\x12\xa1\x56\xdc\xf4\x3c\x3d\x55\x4f\xf2\x26\xe2\x83\xb7\xfc\x7f\xbe\x3f\x5f\x66\xdf\x01\xc9\x8d\x4c\xa0\xe8\x7b\x21\x8e\x14\x15\x1c\x47\x61\x86\xa6\x7b\x5b\x63\x6f\x3f\x88\x4d\x2d\xa1\x10\x32\xd1\xb4\x78\x9b\x1e\xd8\xca\xcd\x61\x52\xa0\xf3\x02\x3d\x7c\x7a\x1b\x63\xab\xd0\x57\xc3\x1c\xc6\x9f\x99\x93\xf5\xaa\x2b\x00\x64\x1c\x2c\xf7\x04\xe5\x17\x6d\xcf\x50\x12\xa7\xb0\xc1\x6b\x0b\xfa\x2e\xc9\x52\x00\x83\xa9\x13\x36\x53\x52\x98\x5a\xe2\xd9\x62\x6e\x97\x30\x72\x72\xa0\x9e\x5e\x74\xe3\xd4\xf5\x88\x7e\xb7\x7e\x25\x81\xe1\xff\xf7\x4f\x06\x78\xe9\x88\xf1\xbc\xa3\x46\x7f\xfe\xfd\xca\xb7\x00\x00\x00\xff\xff\xd1\x41\x62\x51\xf0\x00\x00\x00")

func templates_expenses_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_expenses_html_tmpl,
		"templates/_expenses.html.tmpl",
	)
}

func templates_expenses_html_tmpl() (*asset, error) {
	bytes, err := templates_expenses_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_expenses.html.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_expenses_form_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\x61\xee\x92\x17\x68\x0b\xfa\x00\x2a\x28\x78\x6e\x9b\x69\x1b\x68\x26\xa5\x99\x91\x75\x97\x7d\x33\x6f\xbe\x98\x49\xb6\x7a\x70\x11\xf6\x36\xa5\xdf\x7c\xff\xcf\xe4\x74\x02\x4b\xa3\x63\x02\xa4\xc3\x4a\x1c\x29\xde\x8d\x61\xf3\x08\xe7\x73\x55\xe7\x09\x3c\xc9\x1c\x6c\x83\xcf\x4f\x2f\xaf\x08\xdd\x20\x2e\x70\x83\x06\xdb\x0a\xa0\x5e\xba\x9e\x16\x48\x5c\x83\xdc\x79\xc2\xf6\x81\x8e\xe4\x86\x99\x95\xa7\xda\x94\xbf\x85\x73\xbc\xaa\x80\x7c\xac\xd4\xa0\xd0\x41\x10\x32\xbe\x2f\x99\xbf\xaa\xf7\x6e\xd1\xe4\x7a\xa3\x4d\x6e\x91\x5c\xf0\x2b\x8b\xed\x24\x17\xd2\x61\x4e\x65\x62\xfa\x52\xff\x9f\xad\xa0\xbb\xad\xcc\xe6\x0a\x99\x9d\xb5\xc4\x3f\x50\xd0\x94\x5e\x72\x53\x95\xed\x37\xbd\x57\x91\xc0\xfb\x46\xd4\xde\x3b\xc1\xf6\x91\x94\xe0\x5e\xe3\x94\xa2\x61\x76\x7c\xd4\xf1\xeb\x73\x22\xae\xcd\x05\x6f\xab\xda\xe4\x4b\xb7\x55\x7a\x0d\x62\x9b\x4f\xff\x1d\x00\x00\xff\xff\x5d\xcf\x85\xb6\x98\x01\x00\x00")

func templates_expenses_form_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_expenses_form_html_tmpl,
		"templates/_expenses_form.html.tmpl",
	)
}

func templates_expenses_form_html_tmpl() (*asset, error) {
	bytes, err := templates_expenses_form_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_expenses_form.html.tmpl", size: 408, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_header_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x44\x02\x24\x07\x49\xbd\xf4\xe2\xc8\x02\x9a\x36\x87\x02\x39\x14\x45\x8a\x9e\x47\xe6\x58\x26\xca\x50\x2a\x97\x20\x86\xa0\x7f\xef\x50\x9b\x65\x07\x4e\x97\x00\x31\xb7\x99\x37\xef\xbd\x21\xd5\xb6\x20\x69\xab\x0c\x81\xd8\x11\x4a\xb2\x02\xba\xee\x22\x37\xf8\x0c\x1b\x8d\xce\xad\x05\x4f\x4b\xb4\x30\x0c\x09\x07\x63\xd0\x5e\x14\x17\x00\xb9\x54\x73\xd4\xa6\x36\x1e\x19\xc6\x26\x5b\x1d\x94\xec\xcf\x39\xe2\x5d\x92\xc0\x9d\x45\x23\x21\xfe\xfb\xba\xaa\x34\x41\x45\x1e\x2a\x5b\x87\x86\x24\x6c\x6b\x0b\x25\x79\x4f\x16\x9e\xea\x52\xf1\xa9\x54\xae\xd1\xb8\x87\x24\x19\x31\x16\x55\x46\x12\x23\xd3\xe1\x9c\x23\xca\xe0\x7d\x6d\xc0\xef\x1b\x5a\x8b\x61\x21\x4e\x52\xc6\xd2\x9b\x5a\x6b\x6c\x1c\x49\x01\x12\x3d\x8e\xdb\x91\xfe\xb0\x3f\x6d\xa3\x65\x92\x6b\x91\x8e\xd9\xf3\xf1\x54\x92\x8b\xba\x06\xcd\x54\xc4\xd9\xa4\x36\x7a\x2f\x8a\xc7\xa1\x0c\xa7\xa9\x0a\xbd\xaa\x4d\x9e\xc5\xb8\x33\x69\x8a\x5d\x4b\x18\x5f\x14\xff\x15\x96\x67\x83\xd6\x45\x1a\x9e\xc8\x2e\xa3\xf7\x02\x76\x96\xb6\x6b\x91\x89\xe2\x2e\x48\x16\x96\x67\x38\x7a\x9b\xb1\xb9\xaf\x6d\x9e\xe4\xc2\x39\xf9\x7c\x6b\xd4\x16\xd2\x07\x56\x4b\xf2\x8b\x89\x57\x66\x24\x10\xf4\x82\xc1\x94\xcf\xc3\xd2\x39\xad\xda\x96\xd3\xaf\x1d\xdb\xec\xdd\x0f\xe5\x77\x90\x7e\xa3\x5f\x81\x9c\xff\x8a\xbc\x10\x19\xbd\x34\x64\x1c\x39\x71\xd3\x75\x13\x1e\x6e\xbc\x7a\x26\xd1\xb6\x64\x64\xd7\x15\x2c\x75\x54\x35\x07\x17\x1f\x83\xab\xb0\x24\x13\xf5\xe5\x99\x56\xff\x56\x13\xad\x51\xa6\xfa\xcb\x9a\x53\x70\x71\xaf\x8c\xc1\xdd\xd3\xeb\xa2\x79\x16\xf4\xc1\xaf\x1e\xe0\x4f\x26\x4d\x53\xab\xaa\x9d\x5f\x38\x76\xd6\xee\x5e\xd8\x21\x8e\x97\xcd\xe9\xbd\xa7\x97\x25\x52\xfc\x63\xc6\x15\x69\xc6\xf2\x80\xda\xc1\x41\x54\x70\x64\x5d\xd6\xb6\xe9\xa7\x60\x2d\x19\xff\x9d\xd7\xe9\xfd\x13\x2a\xdd\x75\xa7\xef\x49\x2b\xf3\x53\x14\x4c\x6c\x19\xcc\xc4\xe6\xab\x35\x99\xd0\x2c\x9a\x70\xda\x92\xa3\xc8\x99\x06\x53\xab\x03\x93\x7e\xe8\xc7\x23\xc0\x63\x04\xae\x4e\x9a\x6f\xe9\x1b\x76\x2c\x41\x95\xe9\x31\x95\x79\x13\xf2\xa8\x51\x73\x0b\xe7\x87\x32\x4e\xf2\x8c\x7d\x28\x2e\x86\xc6\xb0\x91\xd7\x9a\x0c\xa4\xf7\xd6\xd6\xd6\xdd\xc0\xfb\xfe\x1b\xba\x78\x50\xd4\x1f\x08\x70\x7e\xdf\x7f\x6d\x34\xdf\x9f\x55\xdf\xe5\x5b\x68\x50\x4a\xee\xc8\x0a\x3e\x34\x2f\xb7\x7d\xab\x18\x95\x9f\x6d\x45\x70\xc9\x79\xb0\x5a\x4f\xc0\x83\xd0\x25\x6e\x59\x25\x32\x46\xda\x19\xfa\x35\x5a\xc4\x63\x92\x97\xe9\x67\x2a\x43\xd5\x75\x8c\xde\x58\x65\xfc\x16\xc4\xd5\xe3\x0a\xae\x98\x56\x5f\x27\xfe\x0c\x85\x20\x06\x45\x67\xe3\x78\xd8\xee\x77\x47\x77\x66\x3f\x62\x0f\xf8\xcb\x1e\xf5\x0e\x5b\x87\x8d\xc3\xec\x77\x00\x00\x00\xff\xff\x9b\xa3\x26\x1e\x65\x06\x00\x00")

func templates_header_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_header_html_tmpl,
		"templates/_header.html.tmpl",
	)
}

func templates_header_html_tmpl() (*asset, error) {
	bytes, err := templates_header_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_header.html.tmpl", size: 1637, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_index_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xe1\x7b\x13\xda\xc3\x0e\x23\x0b\x6c\xb0\xc3\x60\xb7\xc2\xee\x5e\xac\x3a\x06\x5b\x0e\xb6\xb3\x14\x42\xdf\x7d\x8a\x9b\x74\x83\x42\x69\x2f\x91\x91\xa5\xef\x57\xfc\xab\x98\x26\x85\x07\x43\x08\xc2\x90\xc2\xa3\x38\x9d\x8a\xba\xdb\x36\x6f\x83\xd2\x98\xea\x8a\x8f\x5c\x02\xe6\x00\xe5\xa7\xd7\x1a\xd5\x07\x01\x97\x70\x6a\x34\xa9\x83\xf2\x5c\x37\xa7\x6a\x65\x7e\xa0\xb5\x32\xc6\x17\x11\xfc\x28\x9a\x02\xe0\x7f\xae\xf5\x76\xe3\xd4\xe6\x29\x5f\x00\x30\x21\xa1\xeb\xad\x4c\x2c\x8d\xc7\x1e\x29\x62\x14\x50\xce\x28\x6e\xac\xb8\xf3\x21\x82\x0c\x64\x48\x5f\x11\xd6\xf0\xd8\x70\x75\x17\xaa\xe5\x14\x53\xf0\xa4\x9b\xfd\xe0\x1c\x3e\xb3\x66\xf9\x3a\x44\x2d\xbf\x91\x4a\x4e\xb1\x54\x5d\x2d\x15\x77\x4e\x7d\x0b\xfd\x6e\x88\x64\xe7\x6e\xb1\xd7\x90\x29\xcb\xf7\xbe\x7f\xdb\xee\x2e\x13\xec\x9a\xbd\xb4\xca\xcf\x9a\xec\xa0\xb4\x92\x5a\xcc\x72\x7c\x73\x25\x35\x4d\x48\x2a\x5b\x8e\x36\xe2\x6c\x74\xdf\x7c\x61\x18\xa5\xe5\x77\x57\x68\x08\xd6\x5d\xe9\xf3\xaa\xfc\x79\x62\xbd\x36\x24\xce\xeb\x72\x61\xe4\xf8\x1b\x00\x00\xff\xff\x53\xbb\x55\xe8\x76\x02\x00\x00")

func templates_index_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_index_html_tmpl,
		"templates/_index.html.tmpl",
	)
}

func templates_index_html_tmpl() (*asset, error) {
	bytes, err := templates_index_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_index.html.tmpl", size: 630, mode: os.FileMode(420), modTime: time.Unix(1432136526, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_login_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8e\xbb\xae\x83\x30\x10\x44\x7b\x7f\xc5\x6a\x7b\x44\x7b\x0b\x9b\xf2\xa6\x8a\x12\x29\xa4\x8e\x8c\xbd\x80\x25\x7b\x8d\xf0\x52\x44\x88\x7f\x0f\x8f\x76\x66\xce\xe8\xac\x2b\x78\xea\x03\x13\x60\xcc\x43\x60\x84\x6d\x53\xba\xcf\x73\x02\xb6\x89\xcc\x90\xf3\x10\xa9\x3a\x3b\x48\x24\x63\xf6\x06\x9f\x8f\x57\x8b\x60\x9d\xa3\x49\x2a\x37\xda\xb9\x90\x18\x7c\xb7\xff\xd5\xdf\x11\x4b\xc8\x6c\xb0\xbe\xd0\xcf\x75\xdb\x28\x00\xdd\x2d\x22\x99\x41\xbe\x13\x19\x2c\x4b\x97\x82\x20\xb8\x68\x4b\x31\xd8\xc9\x3e\xba\x07\x81\xdb\x89\x81\xe5\x44\xd1\x13\xeb\xfa\xa2\x1a\xa5\xeb\x43\xab\x51\xbb\x32\xb1\x3f\x3c\x7f\x01\x00\x00\xff\xff\x85\xfa\x42\x15\xbd\x00\x00\x00")

func templates_login_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_login_html_tmpl,
		"templates/_login.html.tmpl",
	)
}

func templates_login_html_tmpl() (*asset, error) {
	bytes, err := templates_login_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/_login.html.tmpl", size: 189, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_layout_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\xbd\x4e\x2b\x31\x10\x85\xfb\x3c\xc5\x5c\xf7\xb6\x8b\xdc\x0a\x6d\xd2\xd0\x21\x24\x8a\x7d\x02\xc7\x9e\x95\x1d\xfc\x27\x7b\x88\x88\xa2\xbc\x3b\xde\x35\xb0\x28\x42\x48\x34\x74\x33\x67\x67\xcf\xf9\x34\xe3\xc1\x52\xf0\xfb\x0d\xc0\x60\x51\x99\xb9\x68\xe5\x3f\xce\xe1\x51\x11\x56\x02\x9d\x42\x76\x1e\x0d\xa8\x68\x20\xb8\xe8\x26\xd7\x9a\xfb\x71\x04\xce\xdf\xa7\xbd\x8b\xcf\x50\xd0\xef\x58\xa5\xb3\xc7\x6a\x11\x89\x81\x2d\x38\xed\x98\x25\xca\xf5\x4e\xca\xa0\x5e\xb5\x89\xe2\x90\x12\x55\x2a\x2a\xcf\x4d\xb3\x96\x9f\x82\xdc\x8a\xad\xf8\x2f\x75\xad\xab\x26\x5a\x9e\x68\x0a\xdb\x6f\x56\xae\xa7\x4c\x2e\x45\xe5\x81\x2c\x06\xfc\x03\x0a\xbe\x04\x7d\xcb\xf2\xe3\x8e\x1e\xd4\x49\x8d\xba\xb8\x4c\x2b\x64\xed\x7d\x2d\xfa\xf7\x50\xc7\xdb\xcd\x1c\x1b\xcc\x20\xbb\xe5\x72\x41\xf9\x71\xc2\xe1\x90\xcc\xb9\x47\x5e\x2e\x40\x18\xb2\x6f\xa4\xc0\xe6\xef\x58\x18\x08\xb8\x5e\x3b\x90\x71\x27\xd0\x5e\xd5\xba\x63\x3a\x45\x52\x2e\x62\xe1\x93\x7f\x71\x86\xf5\xff\x6f\x1c\xe6\x21\x8c\xf4\xd5\x42\x36\x8f\x1e\xdf\x53\x1b\xc6\xf2\xa4\xde\x02\x00\x00\xff\xff\xaf\xbd\xe2\x74\x5a\x02\x00\x00")

func templates_layout_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_layout_html_tmpl,
		"templates/layout.html.tmpl",
	)
}

func templates_layout_html_tmpl() (*asset, error) {
	bytes, err := templates_layout_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/layout.html.tmpl", size: 602, mode: os.FileMode(420), modTime: time.Unix(1432134250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/_earnings.html.tmpl": templates_earnings_html_tmpl,
	"templates/_earnings_form.html.tmpl": templates_earnings_form_html_tmpl,
	"templates/_expenses.html.tmpl": templates_expenses_html_tmpl,
	"templates/_expenses_form.html.tmpl": templates_expenses_form_html_tmpl,
	"templates/_header.html.tmpl": templates_header_html_tmpl,
	"templates/_index.html.tmpl": templates_index_html_tmpl,
	"templates/_login.html.tmpl": templates_login_html_tmpl,
	"templates/layout.html.tmpl": templates_layout_html_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"_earnings.html.tmpl": &_bintree_t{templates_earnings_html_tmpl, map[string]*_bintree_t{
		}},
		"_earnings_form.html.tmpl": &_bintree_t{templates_earnings_form_html_tmpl, map[string]*_bintree_t{
		}},
		"_expenses.html.tmpl": &_bintree_t{templates_expenses_html_tmpl, map[string]*_bintree_t{
		}},
		"_expenses_form.html.tmpl": &_bintree_t{templates_expenses_form_html_tmpl, map[string]*_bintree_t{
		}},
		"_header.html.tmpl": &_bintree_t{templates_header_html_tmpl, map[string]*_bintree_t{
		}},
		"_index.html.tmpl": &_bintree_t{templates_index_html_tmpl, map[string]*_bintree_t{
		}},
		"_login.html.tmpl": &_bintree_t{templates_login_html_tmpl, map[string]*_bintree_t{
		}},
		"layout.html.tmpl": &_bintree_t{templates_layout_html_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

